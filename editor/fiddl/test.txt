_sf_enlg 2
_sf_sto 2 0
_sf_sto 10 1
_invoke :pow 0 1
debug_core_state
term

// subroutine pow (sf[0] to the power of sf[1])
:pow
	// store operands
	// m6 is the return value
	// m7 is the factor
	// m8 is the power + counter
	_sf_rcl 0 #m6
	mov #m6 #m7
	_sf_rcl 1 #m8
	// check whether power is 0 => return 1
	ldc 0 #a1
	mov #m8 #a2
	eq
	cjmp :pow_zeropow

	// as long as the counter is > 1
	:pow_loop
	mov #m8 #a1
	ldc 1 #a2
	lte
	cjmp :pow_return
	// multiply value by factor
	mov #m6 #a1
	mov #m7 #a2
	mul
	mov #a1 #m6
	dec #m8
	jmp :pow_loop
	
	:pow_zeropow
	ldc 1 #a1

	:pow_return
	_return #m6
	