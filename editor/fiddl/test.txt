ldcnst #a1 2
ldcnst #a2 32
ldcnst #r :label1
jmp :pow
:label1
term

// subroutine pow, uses a1, a2, m6, m7 and m8; result in a1, returns to #r
:pow
	// store operands
	// m6 is the return value
	// m7 is the factor
	// m8 is the power + counter
	mov #a1 #m6
	mov #a1 #m7
	mov #a2 #m8
	// check whether power is 0 => return 1
	ldcnst #a1 0
	eq
	cjmp :pow_zeropow
	

	// as long as the counter is > 1
	:pow_loop
	mov #m8 #a1
	ldcnst #a2 1
	lte
	cjmp :pow_return
	// multiply value by factor
	mov #m6 #a1
	mov #m7 #a2
	mul
	mov #a1 #m6
	dec #m8
	jmp :pow_loop
	
	:pow_zeropow
	ldcnst #a1 1
	vjmp #r

	:pow_return
	mov #m6 #a1
	vjmp #r
	